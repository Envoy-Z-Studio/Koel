// Mocks generated by Mockito 5.0.12 from annotations
// in app/test/ui/screens/create_playlist_sheet_test.dart.
// Do not manually edit this file.

import 'dart:async' as i5;
import 'dart:ui' as i7;

import 'package:app/models/playlist.dart' as i3;
import 'package:app/models/song.dart' as i6;
import 'package:app/providers/playlist_provider.dart' as i4;
import 'package:mockito/mockito.dart' as i1;
import 'package:rxdart/rxdart.dart' as i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeValueStream<T> extends i1.Fake implements i2.ValueStream<T> {}

class _FakePlaylist extends i1.Fake implements i3.Playlist {}

/// A class which mocks [PlaylistProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlaylistProvider extends i1.Mock implements i4.PlaylistProvider {
  MockPlaylistProvider() {
    i1.throwOnMissingStub(this);
  }

  @override
  i2.ValueStream<i3.Playlist> get playlistPopulatedStream =>
      (super.noSuchMethod(Invocation.getter(#playlistPopulatedStream),
              returnValue: _FakeValueStream<i3.Playlist>())
          as i2.ValueStream<i3.Playlist>);

  @override
  List<i3.Playlist> get playlists =>
      (super.noSuchMethod(Invocation.getter(#playlists),
          returnValue: <i3.Playlist>[]) as List<i3.Playlist>);

  @override
  List<i3.Playlist> get standardPlaylists =>
      (super.noSuchMethod(Invocation.getter(#standardPlaylists),
          returnValue: <i3.Playlist>[]) as List<i3.Playlist>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  i5.Future<void> init(List<dynamic>? playlistData) =>
      (super.noSuchMethod(Invocation.method(#init, [playlistData]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i5.Future<void>);

  @override
  i5.Future<i3.Playlist> populatePlaylist({i3.Playlist? playlist}) =>
      (super.noSuchMethod(
              Invocation.method(#populatePlaylist, [], {#playlist: playlist}),
              returnValue: Future<i3.Playlist>.value(_FakePlaylist()))
          as i5.Future<i3.Playlist>);

  @override
  void populateAllPlaylists() =>
      super.noSuchMethod(Invocation.method(#populateAllPlaylists, []),
          returnValueForMissingStub: null);

  @override
  i5.Future<void> addToPlaylist({i6.Song? song, i3.Playlist? playlist}) =>
      (super.noSuchMethod(
          Invocation.method(
              #addSongToPlaylist, [], {#song: song, #playlist: playlist}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i5.Future<void>);

  @override
  i5.Future<void> removeFromPlaylist(
          {i6.Song? song, i3.Playlist? playlist}) =>
      (super.noSuchMethod(
          Invocation.method(
              #removeSongFromPlaylist, [], {#song: song, #playlist: playlist}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i5.Future<void>);

  @override
  i5.Future<i3.Playlist> create({String? name}) =>
      (super.noSuchMethod(Invocation.method(#create, [], {#name: name}),
              returnValue: Future<i3.Playlist>.value(_FakePlaylist()))
          as i5.Future<i3.Playlist>);

  @override
  i5.Future<void> remove({i3.Playlist? playlist}) =>
      (super.noSuchMethod(Invocation.method(#remove, [], {#playlist: playlist}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i5.Future<void>);

  @override
  void addListener(i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);

  @override
  void removeListener(i7.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);

  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);

  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
