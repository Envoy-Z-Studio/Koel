// Mocks generated by Mockito 5.0.12 from annotations
// in app/test/ui/widgets/song_cache_icon_test.dart.
// Do not manually edit this file.

import 'dart:async' as i6;
import 'dart:ui' as i8;

import 'package:app/models/song.dart' as i5;
import 'package:app/providers/download_provider.dart' as i4;
import 'package:file/file.dart' as i3;
import 'package:flutter_cache_manager/flutter_cache_manager.dart' as i7;
import 'package:mockito/mockito.dart' as i1;
import 'package:rxdart/rxdart.dart' as i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeValueStream<T> extends i1.Fake implements i2.ValueStream<T> {}

class _FakeFile extends i1.Fake implements i3.File {}

class _FakeDateTime extends i1.Fake implements DateTime {}

/// A class which mocks [CacheProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheProvider extends i1.Mock implements i4.DownloadProvider {
  MockCacheProvider() {
    i1.throwOnMissingStub(this);
  }

  @override
  List<i5.Song> get downloads =>
      (super.noSuchMethod(Invocation.getter(#songs), returnValue: <i5.Song>[])
          as List<i5.Song>);

  @override
  set downloads(List<i5.Song>? songs) =>
      super.noSuchMethod(Invocation.setter(#songs, songs),
          returnValueForMissingStub: null);

  @override
  i2.ValueStream<bool> get downloadsClearedStream =>
      (super.noSuchMethod(Invocation.getter(#cacheClearedStream),
          returnValue: _FakeValueStream<bool>()) as i2.ValueStream<bool>);

  @override
  i2.ValueStream<i5.Song> get downloadRemovedStream => (super.noSuchMethod(
      Invocation.getter(#singleCacheRemovedStream),
      returnValue: _FakeValueStream<i5.Song>()) as i2.ValueStream<i5.Song>);

  @override
  i2.ValueStream<i4.Download> get playableDownloadedStream =>
      (super.noSuchMethod(Invocation.getter(#songCachedStream),
              returnValue: _FakeValueStream<i4.Download>())
          as i2.ValueStream<i4.Download>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  i6.Future<void> download({i5.Song? playable}) =>
      (super.noSuchMethod(Invocation.method(#cache, [], {#song: playable}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i6.Future<void>);

  @override
  i6.Future<i7.FileInfo?> getForPlayable({i5.Song? song}) =>
      (super.noSuchMethod(Invocation.method(#get, [], {#song: song}),
              returnValue: Future<i7.FileInfo?>.value())
          as i6.Future<i7.FileInfo?>);

  @override
  i6.Future<bool> has({i5.Song? playable}) =>
      (super.noSuchMethod(Invocation.method(#has, [], {#song: playable}),
          returnValue: Future<bool>.value(false)) as i6.Future<bool>);

  @override
  i6.Future<void> removeForPlayable({i5.Song? song}) =>
      (super.noSuchMethod(Invocation.method(#remove, [], {#song: song}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as i6.Future<void>);

  @override
  i6.Future<void> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as i6.Future<void>);

  @override
  void addListener(i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);

  @override
  void removeListener(i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);

  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);

  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [FileInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileInfo extends i1.Mock implements i7.FileInfo {
  MockFileInfo() {
    i1.throwOnMissingStub(this);
  }

  @override
  i3.File get file =>
      (super.noSuchMethod(Invocation.getter(#file), returnValue: _FakeFile())
          as i3.File);

  @override
  i7.FileSource get source => (super.noSuchMethod(Invocation.getter(#source),
      returnValue: i7.FileSource.NA) as i7.FileSource);

  @override
  DateTime get validTill => (super.noSuchMethod(Invocation.getter(#validTill),
      returnValue: _FakeDateTime()) as DateTime);

  @override
  String get originalUrl =>
      (super.noSuchMethod(Invocation.getter(#originalUrl), returnValue: '')
          as String);
}
